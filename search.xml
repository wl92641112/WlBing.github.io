<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python正则表达式</title>
    <url>/2020/05/06/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式 - (?!), (?:), (?=)"></a>1.正则表达式 - (?!), (?:), (?=)</h1>]]></content>
      <categories>
        <category>python正则</category>
      </categories>
      <tags>
        <tag>python正则</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark之DataFrame操作(python版本)</title>
    <url>/2020/05/06/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/</url>
    <content><![CDATA[<h1 id="0-Spark-SQL简介"><a href="#0-Spark-SQL简介" class="headerlink" title="0.Spark SQL简介"></a>0.Spark SQL简介</h1><p>说到Spark sql 就要说的一个 数据仓库技术hive，hive是为了帮助Hadoop实现sql查询的一种技术，hive本身不存数据，数据是在底层的hdfs里面，hive是sql查询是转化为底层的mapreduce作业进行。如图所示 hive的执行原理</p>
<p><img src="https://github.com/wl92641112/wl92641112.github.io/blob/hexo/source/_posts/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/hive%E6%9F%A5%E8%AF%A2%E5%8E%9F%E7%90%86.png?raw=true" alt="hive查询原理"></p>
<p>spark sql则是把根据hive的原理，实现sql转化为spark的查询查询语句。</p>
<p>spark是线程级别的并行，而MapReduce是进程级并行。</p>
<p>spark sql 不受hive限制，只是兼容HIve。</p>
<p>spark sql应用于DataFrame(带有Schema[模式]信息的RDD)，使用户可以在park sql中执行sql语句，数据即可以来着rdd，也可以是Hive,HDFS,Cassandra等外部数据源，也可以是json格式数据。 目前支持java，scala，python。</p>
<p>spark sql就是使用DataFrame帮助融合多个数据源，可以对外部和内部各种数据源执行各种操作，其次，可以支持大量的数据源和数据分析算法，spark sql 可以融合传统关系数据库的结构化数据管理能力和机器学习的数据处理能力。</p>
<a id="more"></a>

<h1 id="1-DataFrame概述"><a href="#1-DataFrame概述" class="headerlink" title="1. DataFrame概述"></a>1. DataFrame概述</h1><p>DataFrame可以叫做数据框。让spark具备了处理大规模结构化数据的能力，不仅比原来的Rdd转化方式更加简单易用，而且获得了更高的计算性能。</p>
<p>saprk能够轻松的从Mysql到DataFrame转化，并且支持sql查询。</p>
<p>Rdd是分布式的java对象集合，但是对象内部结构对于Rdd而言却是不可知的。</p>
<p>DataFrame是一种Rdd为基础的分布式数据集合，提供了详细的结构信息。</p>
<p>对比 Rdd是一个一个的 person对象，你是不能看到他的具体结构而DataFrame 是一个以rdd为基础的分布式结构化数据集合。通俗的说rdd是一个关闭的抽屉你看不到里面结构，DataFrame是一个打开的抽屉可以直接看到里面的结构。</p>
<p><img src="https://github.com/wl92641112/wl92641112.github.io/blob/hexo/source/_posts/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/df%E5%92%8Crdd%E5%8C%BA%E5%88%AB.png?raw=true" alt="df和rdd区"></p>
<h1 id="2-DataFrame创建"><a href="#2-DataFrame创建" class="headerlink" title="2. DataFrame创建"></a>2. DataFrame创建</h1><p>从spark2.0以后创建spark都用SparkSession接口，SparkSeeion支持不同数据源加载数据，并把数据转化为DataFrame，并支持把DataFrame转换陈SqlContext自身的表，然后时候sql语句来操作数据，SparkSesion提供HIveQL以及其他依赖于Hive的功能支持。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">注意在启动进入pyspark交互式环境以后，pyspark就默认提供了一个SparkContext对象(名称为sc)和一个sparkSession对象名为spark</span></span><br><span class="line"><span class="string">不需要在创建直接可以拿来用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext,SparkConf</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession  <span class="comment"># SparkSession编写spark sql 的指挥官</span></span><br><span class="line">spark = SparkSession.builder.config(conf=SparkConf()).getOrCreate()</span><br><span class="line"><span class="comment"># pyspark 下 spark 对象可以直接用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建DataFrame  </span></span><br><span class="line"><span class="comment"># 注意 读本地文件需要 file:///文件名 例如 file:///usr/local/spark/people.text</span></span><br><span class="line"><span class="comment"># 分布文件 需要写 hdfs:/localhost:9000/路径全名</span></span><br><span class="line">spark.read.text(<span class="string">"people.text"</span>)  <span class="comment"># text文件</span></span><br><span class="line">spark.read.josn(<span class="string">"people.json"</span>) <span class="comment"># json 文件</span></span><br><span class="line">spark.read.parquat(<span class="string">"people.parquet"</span>) <span class="comment"># parquet文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">spark.read.format(<span class="string">"text"</span>).load(<span class="string">"people.text"</span>)</span><br><span class="line">spark.read.format(<span class="string">"json"</span>).load(<span class="string">"people.json"</span>)</span><br><span class="line">spark.read.format(<span class="string">"parquet"</span>).load(<span class="string">"people.parquet"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在安装完spark 的时候是有两个样例文件的</span></span><br><span class="line"><span class="comment"># 路径 /use/local/spark/examples/src/main/respurces/people.json</span></span><br><span class="line"><span class="comment"># 路径 /use/local/spark/examples/src/main/respurces/people.text</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在交互式 的python环境 spark 直接可以用</span></span><br><span class="line">&gt;&gt;&gt;df=spark.read.json(<span class="string">"file:///user-data/home/wangliang/people.json"</span>) <span class="comment"># 生成df</span></span><br><span class="line">&gt;&gt;&gt;df.show() <span class="comment"># 显示 df                                                       </span></span><br><span class="line">+---+----+                                                                  </span><br><span class="line">|age|neme|                                                                  </span><br><span class="line">+---+----+                                                                  </span><br><span class="line">| <span class="number">30</span>|  张三|                                                                </span><br><span class="line">| <span class="number">17</span>|  李四|                                                                </span><br><span class="line">| <span class="number">28</span>|  王五|                                                                </span><br><span class="line">+---+----+</span><br></pre></td></tr></table></figure>






<h1 id="3-DataFrame保存"><a href="#3-DataFrame保存" class="headerlink" title="3. DataFrame保存"></a>3. DataFrame保存</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># spark.write 保存DataFrame</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 注意 保存本地文件需要 file:///文件名 例如 file:///usr/local/spark/people.text</span></span><br><span class="line"><span class="comment"># 分布文件 需要写 hdfs:/localhost:9000/路径全名</span></span><br><span class="line"><span class="comment"># 这里给的简写</span></span><br><span class="line">df.write.text(<span class="string">"people.text"</span>)  <span class="comment"># text文件</span></span><br><span class="line">df.write.josn(<span class="string">"people.json"</span>) <span class="comment"># json 文件</span></span><br><span class="line">df.write.parquat(<span class="string">"people.parquet"</span>) <span class="comment"># parquet文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">df.write.format(<span class="string">"text"</span>).save(<span class="string">"people.text"</span>)</span><br><span class="line">df.write.format(<span class="string">"json"</span>).save(<span class="string">"people.json"</span>)</span><br><span class="line">df.write.format(<span class="string">"parquet"</span>).save(<span class="string">"people.parquet"</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;df=spark.read.json(<span class="string">"file:///user-data/home/wangliang/people.json"</span>)                     &gt;&gt;&gt;df.show()                                                         </span><br><span class="line">+---+----+                                                                  </span><br><span class="line">|age|neme|                                                                  </span><br><span class="line">+---+----+                                                                 </span><br><span class="line">| <span class="number">30</span>|  张三|                                                                </span><br><span class="line">| <span class="number">17</span>|  李四|                                                               </span><br><span class="line">| <span class="number">28</span>|  王五|                                                                </span><br><span class="line">+---+----+                                                                  </span><br><span class="line">&gt;&gt;&gt;newdf = df.select(df[<span class="string">'age'</span>])  <span class="comment"># 生成一个新的df                                           &gt;&gt;&gt;newdf.show()                                                     </span></span><br><span class="line">+---+                                                                       </span><br><span class="line">|age|                                                                       </span><br><span class="line">+---+                                                                       </span><br><span class="line">| <span class="number">30</span>|                                                                       </span><br><span class="line">| <span class="number">17</span>|                                                                      </span><br><span class="line">| <span class="number">28</span>|                                                                       </span><br><span class="line">+---+    </span><br><span class="line">&gt;&gt;&gt;newdf.write.format(<span class="string">"json"</span>).save(<span class="string">"file:///user-data/home/wangliang/people2.json"</span>)</span><br><span class="line"><span class="comment"># 注意这里生成的是一个名录名称，不是一个json文件，.json不是扩展名</span></span><br><span class="line">&gt;&gt;&gt;cd people2.json/                                                  │</span><br><span class="line">/user-data/home/wangliang/people2.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">&gt;&gt;&gt;df=spark.read.json(<span class="string">"file:///user-data/home/wangliang/people2.json"</span>)  </span><br><span class="line">&gt;&gt;&gt;df.show() <span class="comment"># 默认显示20行</span></span><br><span class="line">+---+                                                 </span><br><span class="line">|age|                                                 </span><br><span class="line">+---+                                                 </span><br><span class="line">| <span class="number">30</span>|                                                 </span><br><span class="line">| <span class="number">17</span>|                                                 </span><br><span class="line">| <span class="number">28</span>|                                                 </span><br><span class="line">+---+</span><br></pre></td></tr></table></figure>



<h1 id="4-DataFrame常用操作"><a href="#4-DataFrame常用操作" class="headerlink" title="4. DataFrame常用操作"></a>4. DataFrame常用操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;df=spark.read.json(<span class="string">"file:///user-data/home/wangliang/people.json"</span>)                     &gt;&gt;&gt;df.show()                                                         </span><br><span class="line">+---+----+                                                                  </span><br><span class="line">|age|neme|                                                                  </span><br><span class="line">+---+----+                                                                 </span><br><span class="line">| <span class="number">30</span>|  张三|                                                                </span><br><span class="line">| <span class="number">17</span>|  李四|                                                               </span><br><span class="line">| <span class="number">28</span>|  王五|                                                                </span><br><span class="line">+---+----+</span><br><span class="line"></span><br><span class="line"><span class="comment"># printSchema()  显示df数据结构 nullable 可以为空</span></span><br><span class="line">&gt;&gt;&gt;df.printSchema() </span><br><span class="line">root                                                  </span><br><span class="line"> |-- age: long (nullable = true)                      </span><br><span class="line"> |-- neme: string (nullable = true)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># select() 挑选显示的列    </span></span><br><span class="line">&gt;&gt;&gt;df.select(df[<span class="string">"neme"</span>],df[<span class="string">"age"</span>],df[<span class="string">"age"</span>]+<span class="number">1</span>,df[<span class="string">"age"</span>]*<span class="number">3</span>).show()</span><br><span class="line">+----+---+---------+---------+                        </span><br><span class="line">|neme|age|(age + <span class="number">1</span>)|(age * <span class="number">3</span>)|                        </span><br><span class="line">+----+---+---------+---------+                        </span><br><span class="line">|  张三| <span class="number">30</span>|       <span class="number">31</span>|       <span class="number">90</span>|                      </span><br><span class="line">|  李四| <span class="number">17</span>|       <span class="number">18</span>|       <span class="number">51</span>|                      </span><br><span class="line">|  王五| <span class="number">28</span>|       <span class="number">29</span>|       <span class="number">84</span>|                      </span><br><span class="line">+----+---+---------+---------+  </span><br><span class="line"></span><br><span class="line"><span class="comment"># filter() # 完成过滤操作的</span></span><br><span class="line">&gt;&gt;&gt;df.filter(df[<span class="string">"age"</span>]&gt;<span class="number">20</span>).show()</span><br><span class="line">+---+----+                                            </span><br><span class="line">|age|neme|                                            </span><br><span class="line">+---+----+                                            </span><br><span class="line">| <span class="number">30</span>|  张三|                                          </span><br><span class="line">| <span class="number">28</span>|  王五|                                          </span><br><span class="line">+---+----+  </span><br><span class="line">&gt;&gt;&gt;df.filter(df[<span class="string">"age"</span>]&gt;<span class="number">20</span>).filter(df[<span class="string">"age"</span>]&lt;<span class="number">30</span>).show() <span class="comment"># 大于 小于操作</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">28</span>|  王五|             </span><br><span class="line">+---+----+     </span><br><span class="line">&gt;&gt;&gt;df.filter(<span class="string">"age&gt;20 and age&lt;30"</span>).show()  <span class="comment"># 大于 小于操作</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">28</span>|  王五|             </span><br><span class="line">+---+----+ </span><br><span class="line">&gt;&gt;&gt;df.filter(<span class="string">"neme='王五'"</span>).show() <span class="comment"># 等于 字符串 要加双引号</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">28</span>|  王五|             </span><br><span class="line">+---+----+ </span><br><span class="line">&gt;&gt;&gt;df.filter(<span class="string">"neme!='王五'"</span>).show() <span class="comment"># 不等于 字符串 要加双引号</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">30</span>|  张三|                                                                               | <span class="number">17</span>|  李四|                                                                               +---+----+    </span><br><span class="line"></span><br><span class="line"><span class="comment"># groupBy()  分组</span></span><br><span class="line">&gt;&gt;&gt;df.groupBy(<span class="string">"age"</span>).count().show() <span class="comment"># 根据年龄分组 </span></span><br><span class="line">+---+-----+                                                                               |age|count|                                                                               +---+-----+                                                                               | <span class="number">17</span>|    <span class="number">1</span>|                                                                               | <span class="number">28</span>|    <span class="number">1</span>|                                                                               | <span class="number">30</span>|    <span class="number">1</span>|                                                                               +---+-----+ </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> functions <span class="keyword">as</span> F </span><br><span class="line"><span class="comment"># 使用 函数 进行分组求和</span></span><br><span class="line">&gt;&gt;&gt;df.groupBy(df.neme).agg(F.count(df.neme),F.sum(df.age)).show() <span class="comment"># 计算每个名字都有对少人，然后对这些人的年龄进行求和 </span></span><br><span class="line">+----+-----------+--------+                                                               |neme|count(neme)|sum(age)|                                                               +----+-----------+--------+                                                               |  王五|          <span class="number">1</span>|      <span class="number">28</span>|                                                             |  李四|          <span class="number">1</span>|      <span class="number">17</span>|                                                             |  张三|          <span class="number">1</span>|      <span class="number">30</span>|                                                             +----+-----------+--------+   </span><br><span class="line">&gt;&gt;&gt;df.groupBy().agg(F.sum(df.age)).show()  <span class="comment"># 如果groupBy传空则可以对所有的age求和</span></span><br><span class="line">+--------+                                                                               |sum(age)|                                                                               +--------+                                                                               |      <span class="number">75</span>|                                                                               +--------+ </span><br><span class="line"></span><br><span class="line"><span class="comment"># sort()  排序</span></span><br><span class="line">&gt;&gt;&gt;df.sort(df[<span class="string">"age"</span>].desc()).show() <span class="comment"># 根据年龄降序排序</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">30</span>|  张三|                                                                               | <span class="number">28</span>|  王五|                                                                               | <span class="number">17</span>|  李四|                                                                               +---+----+</span><br><span class="line">&gt;&gt;&gt;df.sort(df[<span class="string">"age"</span>].desc(),df[<span class="string">"neme"</span>].asc()).show() <span class="comment"># 根据年龄降序排序 按照名字升序</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">30</span>|  张三|                                                                               | <span class="number">28</span>|  王五|                                                                               | <span class="number">17</span>|  李四|                                                                               +---+----+  </span><br><span class="line"></span><br><span class="line"><span class="comment"># collect() 把df转化为列表 可以使用for变量，即可以用索引也可以用键值对取</span></span><br><span class="line">&gt;&gt;&gt;df.collect()</span><br><span class="line">[Row(age=<span class="number">30</span>, neme=<span class="string">'张三'</span>), Row(age=<span class="number">17</span>, neme=<span class="string">'李四'</span>), Row(age=<span class="number">28</span>, neme=<span class="string">'王五'</span>)]</span><br><span class="line">&gt;&gt;&gt;df.collect()[<span class="number">1</span>][<span class="number">1</span>] </span><br><span class="line"><span class="string">'李四'</span></span><br><span class="line">&gt;&gt;&gt;df.collect()[<span class="number">1</span>][<span class="string">"neme"</span>]</span><br><span class="line"><span class="string">'李四'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新列</span></span><br><span class="line">&gt;&gt;&gt;df.withColumn(<span class="string">"is—lisi"</span>,F.when(df.neme == <span class="string">'李四'</span>,<span class="number">1</span>).otherwise(<span class="number">0</span>)) <span class="comment"># 创建一个列是不是李四如果是为 1 不是为0</span></span><br><span class="line">+---+----+-------+                                                                       |age|neme|<span class="keyword">is</span>—lisi|                                                                       +---+----+-------+                                                                       | <span class="number">30</span>|  张三|      <span class="number">0</span>|                                                                       | <span class="number">17</span>|  李四|      <span class="number">1</span>|                                                                       | <span class="number">28</span>|  王五|      <span class="number">0</span>|                                                                       +---+----+-------+ </span><br><span class="line"></span><br><span class="line"><span class="comment"># cache() 缓存</span></span><br></pre></td></tr></table></figure>

<h1 id="5-Rdd模式转化DataFrame"><a href="#5-Rdd模式转化DataFrame" class="headerlink" title="5. Rdd模式转化DataFrame"></a>5. Rdd模式转化DataFrame</h1><p>先在准备一个text 文件 ,text是字符串 无法直接读取文件生成df</p>
<p><img src="Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(https://github.com/wl92641112/wl92641112.github.io/blob/hexo/source/_posts/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/text%E6%96%87%E4%BB%B6.png?raw=true" alt=""></p>
<h3 id="5-1-利用反射机制去推断RDD模式"><a href="#5-1-利用反射机制去推断RDD模式" class="headerlink" title="5.1 利用反射机制去推断RDD模式"></a>5.1 利用反射机制去推断RDD模式</h3><p>第一个map 分割每一个字符串为一个列表，第二个map转化每一个列表为一个row对象。</p>
<p><img src="https://github.com/wl92641112/wl92641112.github.io/blob/hexo/source/_posts/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/%E5%88%86%E4%BA%AB%E5%90%88%E8%A1%A8.png?raw=true" alt="image-20200508233655407"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext,SparkConf</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession  <span class="comment"># SparkSession编写spark sql 的指挥官</span></span><br><span class="line">spark = SparkSession.builder.config(conf=SparkConf()).getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果是在pyspark 的交互环境内 直接就又 spark 对象，可以不用设置，第二种创建方法</span></span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession</span><br><span class="line">spark_host = <span class="string">"local[*]"</span></span><br><span class="line">app_name = <span class="string">"abc"</span></span><br><span class="line">spark =SparkSession.builder.master(spark_host).appName(app_name).getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成rdd，然后去推断df</span></span><br><span class="line">people=spark.sparkContext.textFile(<span class="string">"file:///user-data/home/wangliang/people.text"</span>).\</span><br><span class="line">map(<span class="keyword">lambda</span> x:x.split(<span class="string">","</span>)).\</span><br><span class="line">map(<span class="keyword">lambda</span> p:Row(name=p[<span class="number">0</span>],age=int(p[<span class="number">1</span>])))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用rdd生成df 这里可以是 toDF()方法 效果一样</span></span><br><span class="line">scheaPeople = spark.createDataFrame(people)</span><br><span class="line"><span class="comment"># 注册临时表,只有创建临时表才可以用sql</span></span><br><span class="line">scheaPeople.createOrReplaceTempView(<span class="string">"people"</span>)</span><br><span class="line"><span class="comment"># 使用sql</span></span><br><span class="line">results = spark.sql(<span class="string">"select name,age from people where age&gt;20"</span>)</span><br><span class="line"><span class="comment"># 展示 结果</span></span><br><span class="line">results.show()</span><br><span class="line">+--------+---+</span><br><span class="line">|    name|age|</span><br><span class="line">+--------+---+</span><br><span class="line">|zhangsan| <span class="number">29</span>|</span><br><span class="line">|    lisi| <span class="number">30</span>|</span><br><span class="line">+--------+---+</span><br></pre></td></tr></table></figure>



<h3 id="5-2-用编程方式去定义RDD模式"><a href="#5-2-用编程方式去定义RDD模式" class="headerlink" title="5.2 用编程方式去定义RDD模式"></a>5.2 用编程方式去定义RDD模式</h3><p>用编程的模式去定义rdd需要先经过三个步骤</p>
<p>1.第一步：制作表头</p>
<p>2.第二步：制作“表中数据”</p>
<p>3.第三步：把表头和数据拼装起来</p>
<p><img src="https://github.com/wl92641112/wl92641112.github.io/blob/hexo/source/_posts/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/%E8%BD%AC%E5%8C%96%E8%BF%87%E7%A8%8B.png?raw=true" alt="image-20200508231505141"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspark.sql.types <span class="keyword">import</span> StringType,StructField,StructType </span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> Row</span><br><span class="line"><span class="comment"># 第一步生成表头</span></span><br><span class="line">schemString = <span class="string">"name age"</span>  <span class="comment"># 表头字符串 name age 用空格分开</span></span><br><span class="line"><span class="comment"># StructField 表示列格式，第一个参数为列名，第二个是类型，第三个是 是否可以为空</span></span><br><span class="line">fields = [StructField(field_name,StringType(),<span class="literal">True</span>) <span class="keyword">for</span> field_name <span class="keyword">in</span> schemString.split(<span class="string">" "</span>)]</span><br><span class="line"><span class="comment">#  fields  输出 [StructField(name,StringType,true), StructField(age,StringType,true)]</span></span><br><span class="line"><span class="comment"># StructType 是用来描述包装表头的，帮你生成整个df 格式</span></span><br><span class="line">schema = StructType(fields)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成表中记录</span></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext,SparkConf</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession  <span class="comment"># SparkSession编写spark sql 的指挥官</span></span><br><span class="line">spark = SparkSession.builder.config(conf=SparkConf()).getOrCreate()</span><br><span class="line">people=spark.sparkContext.textFile(<span class="string">"file:///user-data/home/wangliang/people.text"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个map 分割每一个字符串为一个列表。此时为rdd</span></span><br><span class="line">parts = people.map(<span class="keyword">lambda</span> x:x.split(<span class="string">","</span>)) </span><br><span class="line"><span class="comment"># 第二个map转化每一个列表为一个row对象。此时为rdd</span></span><br><span class="line">peole = parts.map(<span class="keyword">lambda</span> p:Row(p[<span class="number">0</span>],p[<span class="number">1</span>].strip()))</span><br><span class="line"><span class="comment"># 拼接表头和表中记录 此时为df</span></span><br><span class="line">scheaPeople = spark.createDataFrame(peole,schema)</span><br><span class="line"></span><br><span class="line"><span class="comment"># df可以用show</span></span><br><span class="line">scheaPeople.show()</span><br><span class="line">+--------+---+</span><br><span class="line">|    name|age|</span><br><span class="line">+--------+---+</span><br><span class="line">|zhangsan| <span class="number">29</span>|</span><br><span class="line">|  wangwu| <span class="number">10</span>|</span><br><span class="line">|    lisi| <span class="number">30</span>|</span><br><span class="line">+--------+---+</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注册临时表,只有创建临时表才可以用sql</span></span><br><span class="line">scheaPeople.createOrReplaceTempView(<span class="string">"people"</span>)</span><br><span class="line"><span class="comment"># 使用sql</span></span><br><span class="line">results = spark.sql(<span class="string">"SELECT name,age FROM people"</span>)</span><br><span class="line"><span class="comment"># 展示 结果</span></span><br><span class="line">results.show()</span><br><span class="line">+--------+---+</span><br><span class="line">|    name|age|</span><br><span class="line">+--------+---+</span><br><span class="line">|zhangsan| <span class="number">29</span>|</span><br><span class="line">|  wangwu| <span class="number">10</span>|</span><br><span class="line">|    lisi| <span class="number">30</span>|</span><br><span class="line">+--------+---+</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
        <tag>DataFrame</tag>
        <tag>PySpark</tag>
      </tags>
  </entry>
  <entry>
    <title>python操作-collections.defaultdict的使用</title>
    <url>/2020/05/14/python%E6%93%8D%E4%BD%9C-collections-defaultdict%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>Python中通过Key访问字典，当Key不存在时，会引发‘KeyError’异常。为了避免这种情况的发生，可以使用collections类中的defaultdict()方法来为字典提供默认值。</p>
<p>语法格式：<br>collections.defaultdict([default_factory[, …]])</p>
<p>该函数返回一个类似字典的对象。defaultdict是Python内建字典类（dict）的一个子类，它重写了方法<em>missing</em>(key)，增加了一个可写的实例变量default_factory,实例变量default_factory被missing()方法使用，如果该变量存在，则用以初始化构造器，如果没有，则为None。其它的功能和dict一样。</p>
<p>第一个参数为default_factory属性提供初始值，默认为None；其余参数包括关键字参数（keyword arguments）的用法，和dict构造器用法一样。</p>
<p>1、使用list作第一个参数，可以很容易将键-值对序列转换为列表字典。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">s=[(<span class="string">'yellow'</span>,<span class="number">1</span>),(<span class="string">'blue'</span>, <span class="number">2</span>), (<span class="string">'yellow'</span>, <span class="number">3</span>), (<span class="string">'blue'</span>, <span class="number">4</span>), (<span class="string">'red'</span>, <span class="number">1</span>)]</span><br><span class="line">d=defaultdict(list)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</span><br><span class="line">    d[k].append(v)</span><br><span class="line">a=sorted(d.items())</span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[(<span class="string">'blue'</span>, [<span class="number">2</span>, <span class="number">4</span>]), (<span class="string">'red'</span>, [<span class="number">1</span>]), (<span class="string">'yellow'</span>, [<span class="number">1</span>, <span class="number">3</span>])]</span><br></pre></td></tr></table></figure>



<p>当字典中没有的键第一次出现时，default_factory自动为其返回一个空列表，list.append()会将值添加进新列表；再次遇到相同的键时，list.append()将其它值再添加进该列表。</p>
<p>这种方法比使用dict.setdefault()更为便捷，dict.setdefault()也可以实现相同的功能。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &#x3D; [(&#39;yellow&#39;, 1), (&#39;blue&#39;, 2), (&#39;yellow&#39;, 3), (&#39;blue&#39;, 4), (&#39;red&#39;, 1)]</span><br><span class="line">d&#x3D;&#123;&#125;</span><br><span class="line">for k, v in s:</span><br><span class="line">    d.setdefault(k,[]).append(v)</span><br><span class="line">print(&#39;\n&#39;,d)</span><br><span class="line">a&#x3D;sorted(d.items())</span><br><span class="line">print(&#39;\n&#39;,a)</span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line"> &#123;&#39;red&#39;: [1], &#39;blue&#39;: [2, 4], &#39;yellow&#39;: [1, 3]&#125;</span><br><span class="line"></span><br><span class="line"> [(&#39;blue&#39;, [2, 4]), (&#39;red&#39;, [1]), (&#39;yellow&#39;, [1, 3])]</span><br></pre></td></tr></table></figure>



<p> 2、defaultdict还可以被用来计数，将default_factory设为int即可。<br>代码如下： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">s = <span class="string">'mississippi'</span></span><br><span class="line">d = defaultdict(int)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    d[k] += <span class="number">1</span></span><br><span class="line">print(<span class="string">'\n'</span>,d)</span><br><span class="line">a=sorted(d.items())</span><br><span class="line">print(<span class="string">'\n'</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> defaultdict(&lt;class 'int'&gt;, &#123;'s': 4, 'p': 2, 'm': 1, 'i': 4&#125;)</span><br><span class="line"></span><br><span class="line"> [(<span class="string">'i'</span>, <span class="number">4</span>), (<span class="string">'m'</span>, <span class="number">1</span>), (<span class="string">'p'</span>, <span class="number">2</span>), (<span class="string">'s'</span>, <span class="number">4</span>)]</span><br></pre></td></tr></table></figure>

<p>字符串中的字母第一次出现时，字典中没有该字母，default_factory函数调用int()为其提供一个默认值0,加法操作将计算出每个字母出现的次数。</p>
<p>函数int()是常值函数的一种特例，总是返回0。使用匿名函数（lambda function）可以更快、更灵活的创建常值函数，返回包括0在内的任意常数值。<br>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constant_factory</span><span class="params">(value)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span>: value</span><br><span class="line">d = defaultdict(constant_factory(<span class="string">'&lt;missing&gt;'</span>))</span><br><span class="line">print(<span class="string">'\n'</span>,d)</span><br><span class="line">d.update(name=<span class="string">'John'</span>, action=<span class="string">'ran'</span>)</span><br><span class="line">print(<span class="string">'\n'</span>,d)</span><br><span class="line">print(<span class="string">'\n'</span>,<span class="string">'%(name)s %(action)s to %(object)s'</span> % d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> defaultdict(&lt;function constant_factory.&lt;locals&gt;.&lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x7ff29573aae8</span>&gt;, &#123;&#125;)</span><br><span class="line"></span><br><span class="line"> defaultdict(&lt;function constant_factory.&lt;locals&gt;.&lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x7ff29573aae8</span>&gt;, &#123;<span class="string">'action'</span>: <span class="string">'ran'</span>, <span class="string">'name'</span>: <span class="string">'John'</span>&#125;)</span><br><span class="line"></span><br><span class="line"> John ran to &lt;missing&gt;</span><br></pre></td></tr></table></figure>

<p> 3、default_factory设为set时，可以用defaultdict建立集合字典（a dictionary of sets）。<br>代码： </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">s = [(<span class="string">'red'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">2</span>), (<span class="string">'red'</span>, <span class="number">3</span>), (<span class="string">'blue'</span>, <span class="number">4</span>), (<span class="string">'red'</span>, <span class="number">1</span>), (<span class="string">'blue'</span>, <span class="number">4</span>)]</span><br><span class="line">d = defaultdict(set)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> s:</span><br><span class="line">    d[k].add(v)</span><br><span class="line">print(<span class="string">'\n'</span>,d)</span><br><span class="line">a=sorted(d.items())</span><br><span class="line">print(<span class="string">'\n'</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"> defaultdict(&lt;class 'set'&gt;, &#123;'red': &#123;1, 3&#125;, 'blue': &#123;2, 4&#125;&#125;)</span><br><span class="line"></span><br><span class="line"> [(<span class="string">'blue'</span>, &#123;<span class="number">2</span>, <span class="number">4</span>&#125;), (<span class="string">'red'</span>, &#123;<span class="number">1</span>, <span class="number">3</span>&#125;)]</span><br></pre></td></tr></table></figure>



<p>这个factory_function可以是list、set、str等等，作用是当key不存在时，返回的是工厂函数的默认值，比如list对应[ ]，str对应的是空字符串，set对应set( )，int对应0，如下举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">dict1 = defaultdict(int)</span><br><span class="line">dict2 = defaultdict(set)</span><br><span class="line">dict3 = defaultdict(str)</span><br><span class="line">dict4 = defaultdict(list)</span><br><span class="line">dict1[<span class="number">2</span>] =<span class="string">'two'</span></span><br><span class="line"></span><br><span class="line">print(dict1[<span class="number">1</span>])</span><br><span class="line">print(dict1[<span class="number">2</span>])</span><br><span class="line">print(dict2[<span class="number">1</span>])</span><br><span class="line">print(dict3[<span class="number">1</span>])</span><br><span class="line">print(dict4[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>



<p>————————————————<br>版权声明：本文为CSDN博主「yangsong95」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/yangsong95/article/details/82319675" target="_blank" rel="noopener">https://blog.csdn.net/yangsong95/article/details/82319675</a></p>
]]></content>
      <categories>
        <category>python工具方法</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python数据结构-排序</title>
    <url>/2020/05/14/python%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 冒泡排序 时间复杂度 n方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mystor</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(num)<span class="number">-1</span>): <span class="comment"># 一共需要遍历整个列表的 n-1 次</span></span><br><span class="line">        is_stor = <span class="literal">False</span>  <span class="comment"># 记录本次循环是否发生变化,如果没有变化就可以直接退出</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(num)-i<span class="number">-1</span>): <span class="comment"># 每次都要少一共部位位置</span></span><br><span class="line">           <span class="string">"""</span></span><br><span class="line"><span class="string">这里这个j呢就是控制每一次具体的冒泡过程，请你想一想，我们第一次冒泡需要冒几次，也就是说需要比较几次，</span></span><br><span class="line"><span class="string">假如有三个数，那只需要两次就可以了，当下一次时，最后一个</span></span><br><span class="line"><span class="string">已经是有序的了，所以说少冒泡一次，所以这里j每次都会减去i的值，即不用冒“无用之泡泡”</span></span><br><span class="line"><span class="string">"""</span>    </span><br><span class="line">            <span class="keyword">if</span> num[j] &gt; num[j+<span class="number">1</span>]:</span><br><span class="line">                num[j],num[j+<span class="number">1</span>] = num[j+<span class="number">1</span>], num[j]</span><br><span class="line">                is_stor = <span class="literal">True</span>  <span class="comment"># 修改变量，说明发生变化</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_stor: <span class="comment"># 没有变化退出</span></span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">mystor([<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># n平方  每次拿出一个最小的</span></span><br><span class="line">n = [<span class="number">3</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">3</span>]</span><br><span class="line">x = len(n)</span><br><span class="line"><span class="comment"># 从小到大</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(x): <span class="comment"># n次</span></span><br><span class="line">    mid_id = i</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,x):</span><br><span class="line">        <span class="keyword">if</span> n[j] &lt;  n[mid_id]: <span class="comment"># 只需要改变一下判断方向</span></span><br><span class="line">            mid_id = j</span><br><span class="line">    n[mid_id],n[i] =n[i], n[mid_id]</span><br><span class="line">print(n)</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 插入排序  时间复杂度 n方</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mystor</span><span class="params">(num)</span>:</span></span><br><span class="line">    n = len(num)  </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,n):</span><br><span class="line">        cur = num[i]</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> cur &lt; num[j]:  <span class="comment"># 对比谁大谁小</span></span><br><span class="line">                num[j+<span class="number">1</span>] = num[j]  <span class="comment"># 将 大的数据后移 动</span></span><br><span class="line">                num[j] = cur  <span class="comment"># 将小的数据 插入</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">mystor([<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归并排序   分治思想 时间复杂度 nlogn</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    c = []</span><br><span class="line">    h = j =<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; len(a) <span class="keyword">and</span> h&lt;len(b):</span><br><span class="line">        <span class="keyword">if</span> a[j] &lt; b[h]:</span><br><span class="line">            c.append(a[j])</span><br><span class="line">            j+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c.append(b[h])</span><br><span class="line">            h += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> j == len(a):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> b[h:]:</span><br><span class="line">            c.append(i)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> a[j:]:</span><br><span class="line">            c.append(i)</span><br><span class="line">    <span class="keyword">return</span> c</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(listl)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(listl) &lt;=<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> listl</span><br><span class="line">    mid = len(listl)//<span class="number">2</span></span><br><span class="line">    left = main(listl[:mid])</span><br><span class="line">    right = main(listl[mid:])</span><br><span class="line">    <span class="keyword">return</span> merge(left,right)</span><br><span class="line">main([<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速排序  分治思想 时间复杂度 nlogn</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(alist,start,end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &gt;= end:</span><br><span class="line">        <span class="keyword">return</span> alist</span><br><span class="line">    i= start</span><br><span class="line">    j = end</span><br><span class="line">    mid = alist[start]</span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> alist[j] &gt;= mid:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        alist[i] =  alist[j]</span><br><span class="line">        <span class="keyword">while</span> i &lt; j <span class="keyword">and</span> alist[i] &lt; mid:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        alist[j] =  alist[i]</span><br><span class="line">    alist[i] = mid</span><br><span class="line">    quick_sort(alist,start,i<span class="number">-1</span>)</span><br><span class="line">    quick_sort(alist,i+<span class="number">1</span>,end)</span><br><span class="line">    <span class="keyword">return</span> alist</span><br><span class="line">quick_sort([<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>],<span class="number">0</span>,len([<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">4</span>])<span class="number">-1</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python数据结构</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
