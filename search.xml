<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python正则表达式</title>
    <url>/2020/05/06/python%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式 - (?!), (?:), (?=)"></a>1.正则表达式 - (?!), (?:), (?=)</h1>]]></content>
      <categories>
        <category>python正则</category>
      </categories>
      <tags>
        <tag>python正则</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>Spark之DataFrame操作(python版本)</title>
    <url>/2020/05/06/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/</url>
    <content><![CDATA[<h1 id="0-Spark-SQL简介"><a href="#0-Spark-SQL简介" class="headerlink" title="0.Spark SQL简介"></a>0.Spark SQL简介</h1><p>说到Spark sql 就要说的一个 数据仓库技术hive，hive是为了帮助Hadoop实现sql查询的一种技术，hive本身不存数据，数据是在底层的hdfs里面，hive是sql查询是转化为底层的mapreduce作业进行。如图所示 hive的执行原理</p>
<p><img src="_posts/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/hive%E6%9F%A5%E8%AF%A2%E5%8E%9F%E7%90%86.png" alt="hive查询原理"></p>
<p>spark sql则是把根据hive的原理，实现sql转化为spark的查询查询语句。</p>
<p>spark是线程级别的并行，而MapReduce是进程级并行。</p>
<p>spark sql 不受hive限制，只是兼容HIve。</p>
<p>spark sql应用于DataFrame(带有Schema[模式]信息的RDD)，使用户可以在park sql中执行sql语句，数据即可以来着rdd，也可以是Hive,HDFS,Cassandra等外部数据源，也可以是json格式数据。 目前支持java，scala，python。</p>
<p>spark sql就是使用DataFrame帮助融合多个数据源，可以对外部和内部各种数据源执行各种操作，其次，可以支持大量的数据源和数据分析算法，spark sql 可以融合传统关系数据库的结构化数据管理能力和机器学习的数据处理能力。</p>
<a id="more"></a>

<h1 id="1-DataFrame概述"><a href="#1-DataFrame概述" class="headerlink" title="1. DataFrame概述"></a>1. DataFrame概述</h1><p>DataFrame可以叫做数据框。让spark具备了处理大规模结构化数据的能力，不仅比原来的Rdd转化方式更加简单易用，而且获得了更高的计算性能。</p>
<p>saprk能够轻松的从Mysql到DataFrame转化，并且支持sql查询。</p>
<p>Rdd是分布式的java对象集合，但是对象内部结构对于Rdd而言却是不可知的。</p>
<p>DataFrame是一种Rdd为基础的分布式数据集合，提供了详细的结构信息。</p>
<p>对比 Rdd是一个一个的 person对象，你是不能看到他的具体结构而DataFrame 是一个以rdd为基础的分布式结构化数据集合。通俗的说rdd是一个关闭的抽屉你看不到里面结构，DataFrame是一个打开的抽屉可以直接看到里面的结构。</p>
<p><img src="_posts/Spark%E4%B9%8BDataFrame%E6%93%8D%E4%BD%9C(python%E7%89%88%E6%9C%AC)/df%E5%92%8Crdd%E5%8C%BA%E5%88%AB.png" alt="df和rdd区"></p>
<h1 id="2-DataFrame创建"><a href="#2-DataFrame创建" class="headerlink" title="2. DataFrame创建"></a>2. DataFrame创建</h1><p>从spark2.0以后创建spark都用SparkSession接口，SparkSeeion支持不同数据源加载数据，并把数据转化为DataFrame，并支持把DataFrame转换陈SqlContext自身的表，然后时候sql语句来操作数据，SparkSesion提供HIveQL以及其他依赖于Hive的功能支持。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">注意在启动进入pyspark交互式环境以后，pyspark就默认提供了一个SparkContext对象(名称为sc)和一个sparkSession对象名为spark</span></span><br><span class="line"><span class="string">不需要在创建直接可以拿来用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark <span class="keyword">import</span> SparkContext,SparkConf</span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> SparkSession  <span class="comment"># SparkSession编写spark sql 的指挥官</span></span><br><span class="line">spark = SparkSession.builder.config(conf=SparkConf()).getOrCreate()</span><br><span class="line"><span class="comment"># pyspark 下 spark 对象可以直接用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建DataFrame  </span></span><br><span class="line"><span class="comment"># 注意 读本地文件需要 file:///文件名 例如 file:///usr/local/spark/people.text</span></span><br><span class="line"><span class="comment"># 分布文件 需要写 hdfs:/localhost:9000/路径全名</span></span><br><span class="line">spark.read.text(<span class="string">"people.text"</span>)  <span class="comment"># text文件</span></span><br><span class="line">spark.read.josn(<span class="string">"people.json"</span>) <span class="comment"># json 文件</span></span><br><span class="line">spark.read.parquat(<span class="string">"people.parquet"</span>) <span class="comment"># parquet文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">spark.read.format(<span class="string">"text"</span>).load(<span class="string">"people.text"</span>)</span><br><span class="line">spark.read.format(<span class="string">"json"</span>).load(<span class="string">"people.json"</span>)</span><br><span class="line">spark.read.format(<span class="string">"parquet"</span>).load(<span class="string">"people.parquet"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在安装完spark 的时候是有两个样例文件的</span></span><br><span class="line"><span class="comment"># 路径 /use/local/spark/examples/src/main/respurces/people.json</span></span><br><span class="line"><span class="comment"># 路径 /use/local/spark/examples/src/main/respurces/people.text</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在交互式 的python环境 spark 直接可以用</span></span><br><span class="line">&gt;&gt;&gt;df=spark.read.json(<span class="string">"file:///user-data/home/wangliang/people.json"</span>) <span class="comment"># 生成df</span></span><br><span class="line">&gt;&gt;&gt;df.show() <span class="comment"># 显示 df                                                       </span></span><br><span class="line">+---+----+                                                                  </span><br><span class="line">|age|neme|                                                                  </span><br><span class="line">+---+----+                                                                  </span><br><span class="line">| <span class="number">30</span>|  张三|                                                                </span><br><span class="line">| <span class="number">17</span>|  李四|                                                                </span><br><span class="line">| <span class="number">28</span>|  王五|                                                                </span><br><span class="line">+---+----+</span><br></pre></td></tr></table></figure>






<h1 id="3-DataFrame保存"><a href="#3-DataFrame保存" class="headerlink" title="3. DataFrame保存"></a>3. DataFrame保存</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># spark.write 保存DataFrame</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 注意 保存本地文件需要 file:///文件名 例如 file:///usr/local/spark/people.text</span></span><br><span class="line"><span class="comment"># 分布文件 需要写 hdfs:/localhost:9000/路径全名</span></span><br><span class="line"><span class="comment"># 这里给的简写</span></span><br><span class="line">df.write.text(<span class="string">"people.text"</span>)  <span class="comment"># text文件</span></span><br><span class="line">df.write.josn(<span class="string">"people.json"</span>) <span class="comment"># json 文件</span></span><br><span class="line">df.write.parquat(<span class="string">"people.parquet"</span>) <span class="comment"># parquet文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">df.write.format(<span class="string">"text"</span>).save(<span class="string">"people.text"</span>)</span><br><span class="line">df.write.format(<span class="string">"json"</span>).save(<span class="string">"people.json"</span>)</span><br><span class="line">df.write.format(<span class="string">"parquet"</span>).save(<span class="string">"people.parquet"</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;df=spark.read.json(<span class="string">"file:///user-data/home/wangliang/people.json"</span>)                     &gt;&gt;&gt;df.show()                                                         </span><br><span class="line">+---+----+                                                                  </span><br><span class="line">|age|neme|                                                                  </span><br><span class="line">+---+----+                                                                 </span><br><span class="line">| <span class="number">30</span>|  张三|                                                                </span><br><span class="line">| <span class="number">17</span>|  李四|                                                               </span><br><span class="line">| <span class="number">28</span>|  王五|                                                                </span><br><span class="line">+---+----+                                                                  </span><br><span class="line">&gt;&gt;&gt;newdf = df.select(df[<span class="string">'age'</span>])  <span class="comment"># 生成一个新的df                                           &gt;&gt;&gt;newdf.show()                                                     </span></span><br><span class="line">+---+                                                                       </span><br><span class="line">|age|                                                                       </span><br><span class="line">+---+                                                                       </span><br><span class="line">| <span class="number">30</span>|                                                                       </span><br><span class="line">| <span class="number">17</span>|                                                                      </span><br><span class="line">| <span class="number">28</span>|                                                                       </span><br><span class="line">+---+    </span><br><span class="line">&gt;&gt;&gt;newdf.write.format(<span class="string">"json"</span>).save(<span class="string">"file:///user-data/home/wangliang/people2.json"</span>)</span><br><span class="line"><span class="comment"># 注意这里生成的是一个名录名称，不是一个json文件，.json不是扩展名</span></span><br><span class="line">&gt;&gt;&gt;cd people2.json/                                                  │</span><br><span class="line">/user-data/home/wangliang/people2.json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取</span></span><br><span class="line">&gt;&gt;&gt;df=spark.read.json(<span class="string">"file:///user-data/home/wangliang/people2.json"</span>)  </span><br><span class="line">&gt;&gt;&gt;df.show() <span class="comment"># 默认显示20行</span></span><br><span class="line">+---+                                                 </span><br><span class="line">|age|                                                 </span><br><span class="line">+---+                                                 </span><br><span class="line">| <span class="number">30</span>|                                                 </span><br><span class="line">| <span class="number">17</span>|                                                 </span><br><span class="line">| <span class="number">28</span>|                                                 </span><br><span class="line">+---+</span><br></pre></td></tr></table></figure>



<h1 id="4-DataFrame常用操作"><a href="#4-DataFrame常用操作" class="headerlink" title="4. DataFrame常用操作"></a>4. DataFrame常用操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;df=spark.read.json(<span class="string">"file:///user-data/home/wangliang/people.json"</span>)                     &gt;&gt;&gt;df.show()                                                         </span><br><span class="line">+---+----+                                                                  </span><br><span class="line">|age|neme|                                                                  </span><br><span class="line">+---+----+                                                                 </span><br><span class="line">| <span class="number">30</span>|  张三|                                                                </span><br><span class="line">| <span class="number">17</span>|  李四|                                                               </span><br><span class="line">| <span class="number">28</span>|  王五|                                                                </span><br><span class="line">+---+----+</span><br><span class="line"></span><br><span class="line"><span class="comment"># printSchema()  显示df数据结构 nullable 可以为空</span></span><br><span class="line">&gt;&gt;&gt;df.printSchema() </span><br><span class="line">root                                                  </span><br><span class="line"> |-- age: long (nullable = true)                      </span><br><span class="line"> |-- neme: string (nullable = true)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># select() 挑选显示的列    </span></span><br><span class="line">&gt;&gt;&gt;df.select(df[<span class="string">"neme"</span>],df[<span class="string">"age"</span>],df[<span class="string">"age"</span>]+<span class="number">1</span>,df[<span class="string">"age"</span>]*<span class="number">3</span>).show()</span><br><span class="line">+----+---+---------+---------+                        </span><br><span class="line">|neme|age|(age + <span class="number">1</span>)|(age * <span class="number">3</span>)|                        </span><br><span class="line">+----+---+---------+---------+                        </span><br><span class="line">|  张三| <span class="number">30</span>|       <span class="number">31</span>|       <span class="number">90</span>|                      </span><br><span class="line">|  李四| <span class="number">17</span>|       <span class="number">18</span>|       <span class="number">51</span>|                      </span><br><span class="line">|  王五| <span class="number">28</span>|       <span class="number">29</span>|       <span class="number">84</span>|                      </span><br><span class="line">+----+---+---------+---------+  </span><br><span class="line"></span><br><span class="line"><span class="comment"># filter() # 完成过滤操作的</span></span><br><span class="line">&gt;&gt;&gt;df.filter(df[<span class="string">"age"</span>]&gt;<span class="number">20</span>).show()</span><br><span class="line">+---+----+                                            </span><br><span class="line">|age|neme|                                            </span><br><span class="line">+---+----+                                            </span><br><span class="line">| <span class="number">30</span>|  张三|                                          </span><br><span class="line">| <span class="number">28</span>|  王五|                                          </span><br><span class="line">+---+----+  </span><br><span class="line">&gt;&gt;&gt;df.filter(df[<span class="string">"age"</span>]&gt;<span class="number">20</span>).filter(df[<span class="string">"age"</span>]&lt;<span class="number">30</span>).show() <span class="comment"># 大于 小于操作</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">28</span>|  王五|             </span><br><span class="line">+---+----+     </span><br><span class="line">&gt;&gt;&gt;df.filter(<span class="string">"age&gt;20 and age&lt;30"</span>).show()  <span class="comment"># 大于 小于操作</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">28</span>|  王五|             </span><br><span class="line">+---+----+ </span><br><span class="line">&gt;&gt;&gt;df.filter(<span class="string">"neme='王五'"</span>).show() <span class="comment"># 等于 字符串 要加双引号</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">28</span>|  王五|             </span><br><span class="line">+---+----+ </span><br><span class="line">&gt;&gt;&gt;df.filter(<span class="string">"neme!='王五'"</span>).show() <span class="comment"># 不等于 字符串 要加双引号</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">30</span>|  张三|                                                                               | <span class="number">17</span>|  李四|                                                                               +---+----+    </span><br><span class="line"></span><br><span class="line"><span class="comment"># groupBy()  分组</span></span><br><span class="line">&gt;&gt;&gt;df.groupBy(<span class="string">"age"</span>).count().show() <span class="comment"># 根据年龄分组 </span></span><br><span class="line">+---+-----+                                                                               |age|count|                                                                               +---+-----+                                                                               | <span class="number">17</span>|    <span class="number">1</span>|                                                                               | <span class="number">28</span>|    <span class="number">1</span>|                                                                               | <span class="number">30</span>|    <span class="number">1</span>|                                                                               +---+-----+ </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pyspark.sql <span class="keyword">import</span> functions <span class="keyword">as</span> F </span><br><span class="line"><span class="comment"># 使用 函数 进行分组求和</span></span><br><span class="line">&gt;&gt;&gt;df.groupBy(df.neme).agg(F.count(df.neme),F.sum(df.age)).show() <span class="comment"># 计算每个名字都有对少人，然后对这些人的年龄进行求和 </span></span><br><span class="line">+----+-----------+--------+                                                               |neme|count(neme)|sum(age)|                                                               +----+-----------+--------+                                                               |  王五|          <span class="number">1</span>|      <span class="number">28</span>|                                                             |  李四|          <span class="number">1</span>|      <span class="number">17</span>|                                                             |  张三|          <span class="number">1</span>|      <span class="number">30</span>|                                                             +----+-----------+--------+   </span><br><span class="line">&gt;&gt;&gt;df.groupBy().agg(F.sum(df.age)).show()  <span class="comment"># 如果groupBy传空则可以对所有的age求和</span></span><br><span class="line">+--------+                                                                               |sum(age)|                                                                               +--------+                                                                               |      <span class="number">75</span>|                                                                               +--------+ </span><br><span class="line"></span><br><span class="line"><span class="comment"># sort()  排序</span></span><br><span class="line">&gt;&gt;&gt;df.sort(df[<span class="string">"age"</span>].desc()).show() <span class="comment"># 根据年龄降序排序</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">30</span>|  张三|                                                                               | <span class="number">28</span>|  王五|                                                                               | <span class="number">17</span>|  李四|                                                                               +---+----+</span><br><span class="line">&gt;&gt;&gt;df.sort(df[<span class="string">"age"</span>].desc(),df[<span class="string">"neme"</span>].asc()).show() <span class="comment"># 根据年龄降序排序 按照名字升序</span></span><br><span class="line">+---+----+                                                                               |age|neme|                                                                               +---+----+                                                                               | <span class="number">30</span>|  张三|                                                                               | <span class="number">28</span>|  王五|                                                                               | <span class="number">17</span>|  李四|                                                                               +---+----+  </span><br><span class="line"></span><br><span class="line"><span class="comment"># collect() 把df转化为列表 可以使用for变量，即可以用索引也可以用键值对取</span></span><br><span class="line">&gt;&gt;&gt;df.collect()</span><br><span class="line">[Row(age=<span class="number">30</span>, neme=<span class="string">'张三'</span>), Row(age=<span class="number">17</span>, neme=<span class="string">'李四'</span>), Row(age=<span class="number">28</span>, neme=<span class="string">'王五'</span>)]</span><br><span class="line">&gt;&gt;&gt;df.collect()[<span class="number">1</span>][<span class="number">1</span>] </span><br><span class="line"><span class="string">'李四'</span></span><br><span class="line">&gt;&gt;&gt;df.collect()[<span class="number">1</span>][<span class="string">"neme"</span>]</span><br><span class="line"><span class="string">'李四'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新列</span></span><br><span class="line">&gt;&gt;&gt;df.withColumn(<span class="string">"is—lisi"</span>,F.when(df.neme == <span class="string">'李四'</span>,<span class="number">1</span>).otherwise(<span class="number">0</span>)) <span class="comment"># 创建一个列是不是李四如果是为 1 不是为0</span></span><br><span class="line">+---+----+-------+                                                                       |age|neme|<span class="keyword">is</span>—lisi|                                                                       +---+----+-------+                                                                       | <span class="number">30</span>|  张三|      <span class="number">0</span>|                                                                       | <span class="number">17</span>|  李四|      <span class="number">1</span>|                                                                       | <span class="number">28</span>|  王五|      <span class="number">0</span>|                                                                       +---+----+-------+ </span><br><span class="line"></span><br><span class="line"><span class="comment"># cache() 缓存</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spark</category>
      </categories>
      <tags>
        <tag>Spark</tag>
        <tag>DataFrame</tag>
        <tag>PySpark</tag>
      </tags>
  </entry>
</search>
